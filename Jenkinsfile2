// rename build name
currentBuild.displayName= "Nodejs-app-#"+currentBuild.number
// define variable for imported groovy script
def gv

pipeline {
    agent any
    options {
        ansiColor('xterm')
        timestamps()
        // only this number of build logs are kept 
        buildDiscarder(logRotator(numToKeepStr: '10'))
    }
    environment {
        dockerports = "3000:3000"
        dockerimage = "nodeaps"
        dockercontainer = "node.jsss"
    }
    parameters {
        string(name: 'VERSION', defaultValue: '', description: 'version to deploy on prod')
        // choice(name: 'VERSION', choices: ['1.1', '2.2', '3.3'], description: '')
        booleanParam(name: 'executeWelcome', defaultValue: true, description: '')
    }
    stages {
    stage ('Welcome message') {
        // If one stage fail, all of them should fail
        failFast true
        when {
            expression {
                params.executeWelcome == true
            }
        }
        steps{
            script{
                  def name = "Mihai"
                  if (name == "Mihai")
                    // println("Hi ${name}")
                    println("\033[34mHi\033[0m \033[35m${name}!\033[0m")               
                  else
                    println("Hi stranger")
                  sleep 2
                  echo "End of line"
                }
            }    
        }  
        stage("init") {
            steps {
                script {
                    gv = load "script.groovy"
                }
            }
        }
        stage ('Start the App script') {
         steps {
            script{
                gv.startingApp()
            }
        }
    }  
    stage ('Script permissions') {
        steps {
        script {
             gv.scriptpermimisionApp()
            }
           }
        }  
    stage ('Execute script') {
         steps {
        script {
             gv.executescriptApp()
            }
           }
        }   
    stage ('Docker build') {
        steps {
            script{
                gv.buildApp()
            }
           }
        }  
    stage ('Docker run') {
        steps {
        script {
              gv.dockerrunApp()
            }
        }
    } 
   } 
   post {
    success{
        echo 'Job done'
    }
    failure {
        echo 'Job failed'     
     }
   }   
}
